{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "035f1a92-3035-4400-b570-d167601eedd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import pickle\n",
    "import joblib\n",
    "import pandas as pd\n",
    "from flask import Flask, jsonify, request\n",
    "from peewee import (\n",
    "    SqliteDatabase, Model, IntegerField,\n",
    "    FloatField, TextField, IntegrityError\n",
    ")\n",
    "from playhouse.shortcuts import model_to_dict\n",
    "\n",
    "########################################\n",
    "# Configuração do banco de dados\n",
    "DB = SqliteDatabase('predictions.db')\n",
    "\n",
    "class Prediction(Model):\n",
    "    observation_id = IntegerField(unique=True)\n",
    "    observation = TextField()\n",
    "    proba = FloatField()\n",
    "    true_class = IntegerField(null=True)\n",
    "\n",
    "    class Meta:\n",
    "        database = DB\n",
    "\n",
    "DB.create_tables([Prediction], safe=True)\n",
    "########################################\n",
    "\n",
    "########################################\n",
    "# Carregar modelo treinado e metadados\n",
    "with open(os.path.join('data', 'baseline_model_columns.json')) as fh:\n",
    "    columns = json.load(fh)\n",
    "\n",
    "with open(os.path.join('data', 'baseline_model_pipeline.pickle'), 'rb') as fh:\n",
    "    pipeline = joblib.load(fh)\n",
    "\n",
    "with open(os.path.join('data', 'baseline_model_dtypes.pickle'), 'rb') as fh:\n",
    "    dtypes = pickle.load(fh)\n",
    "\n",
    "# Carregar dataframe de referência para validação\n",
    "df = pd.read_csv(os.path.join('data', 'reference_data.csv'))\n",
    "########################################\n",
    "\n",
    "########################################\n",
    "# Funções auxiliares para validação\n",
    "def get_valid_categories(df, column):\n",
    "    return df[column].unique().tolist() if column in df.columns else []\n",
    "\n",
    "def get_valid_range(df, column):\n",
    "    return (df[column].min(), df[column].max()) if column in df.columns else (None, None)\n",
    "\n",
    "def attempt_predict(request_data):\n",
    "    try:\n",
    "        if 'data' not in request_data:\n",
    "            return {\"observation_id\": request_data.get(\"observation_id\"), \"error\": \"Missing 'data' field in request.\"}\n",
    "\n",
    "        data = request_data['data']\n",
    "        extra_columns = [col for col in data.keys() if col not in columns]\n",
    "        if extra_columns:\n",
    "            return {\"observation_id\": request_data.get(\"observation_id\"), \"error\": f\"Unexpected columns: {', '.join(extra_columns)}\"}\n",
    "\n",
    "        for col in columns:\n",
    "            if col not in data:\n",
    "                return {\"observation_id\": request_data.get(\"observation_id\"), \"error\": f\"Missing required field '{col}'\"}\n",
    "\n",
    "        for col in columns:\n",
    "            if col in df.columns and data[col] not in get_valid_categories(df, col):\n",
    "                return {\"observation_id\": request_data.get(\"observation_id\"), \"error\": f\"Invalid value '{data[col]}' for '{col}'\"}\n",
    "\n",
    "        numeric_columns = ['age', 'capital-gain', 'capital-loss', 'hours-per-week']\n",
    "        for col in numeric_columns:\n",
    "            if col in data:\n",
    "                min_value, max_value = get_valid_range(df, col)\n",
    "                if min_value is not None and max_value is not None and not (min_value <= data[col] <= max_value):\n",
    "                    return {\"observation_id\": request_data.get(\"observation_id\"), \"error\": f\"Value {data[col]} for '{col}' out of range [{min_value}, {max_value}]\"}\n",
    "\n",
    "        input_data = pd.DataFrame([data]).astype(dtypes)\n",
    "        prediction = pipeline.predict(input_data)[0]\n",
    "        probability = pipeline.predict_proba(input_data)[0, 1]\n",
    "\n",
    "        return {\"observation_id\": request_data[\"observation_id\"], \"prediction\": bool(prediction), \"probability\": float(probability)}\n",
    "    except Exception as e:\n",
    "        return {\"observation_id\": request_data.get(\"observation_id\"), \"error\": str(e)}\n",
    "########################################\n",
    "\n",
    "########################################\n",
    "# Configuração do servidor Flask\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/predict', methods=['POST'])\n",
    "def predict():\n",
    "    request_data = request.get_json()\n",
    "    response = attempt_predict(request_data)\n",
    "    \n",
    "    if \"error\" not in response:\n",
    "        try:\n",
    "            p = Prediction(\n",
    "                observation_id=request_data[\"observation_id\"],\n",
    "                proba=response[\"probability\"],\n",
    "                observation=json.dumps(request_data)\n",
    "            )\n",
    "            p.save()\n",
    "        except IntegrityError:\n",
    "            response[\"error\"] = f\"ERROR: Observation ID {request_data['observation_id']} already exists\"\n",
    "            DB.rollback()\n",
    "    \n",
    "    return jsonify(response)\n",
    "\n",
    "@app.route('/update', methods=['POST'])\n",
    "def update():\n",
    "    obs = request.get_json()\n",
    "    try:\n",
    "        p = Prediction.get(Prediction.observation_id == obs['id'])\n",
    "        p.true_class = obs['true_class']\n",
    "        p.save()\n",
    "        return jsonify(model_to_dict(p))\n",
    "    except Prediction.DoesNotExist:\n",
    "        return jsonify({'error': f\"Observation ID {obs['id']} does not exist\"})\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
